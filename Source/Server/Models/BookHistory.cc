/**
 *
 *  BookHistory.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "BookHistory.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::bsuir_library;

const std::string BookHistory::Cols::_id = "id";
const std::string BookHistory::Cols::_book_instance_id = "book_instance_id";
const std::string BookHistory::Cols::_message = "message";
const std::string BookHistory::primaryKeyName = "id";
const bool BookHistory::hasPrimaryKey = true;
const std::string BookHistory::tableName = "book_history";

const std::vector<typename BookHistory::MetaData> BookHistory::metaData_={
{"id","uint64_t","bigint unsigned",8,1,1,1},
{"book_instance_id","uint64_t","bigint unsigned",8,0,0,1},
{"message","std::string","text",0,0,0,1}
};
const std::string &BookHistory::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
BookHistory::BookHistory(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["book_instance_id"].isNull())
        {
            bookInstanceId_=std::make_shared<uint64_t>(r["book_instance_id"].as<uint64_t>());
        }
        if(!r["message"].isNull())
        {
            message_=std::make_shared<std::string>(r["message"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            bookInstanceId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            message_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

BookHistory::BookHistory(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            bookInstanceId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            message_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

BookHistory::BookHistory(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("book_instance_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["book_instance_id"].isNull())
        {
            bookInstanceId_=std::make_shared<uint64_t>((uint64_t)pJson["book_instance_id"].asUInt64());
        }
    }
    if(pJson.isMember("message"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["message"].isNull())
        {
            message_=std::make_shared<std::string>(pJson["message"].asString());
        }
    }
}

void BookHistory::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            bookInstanceId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            message_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void BookHistory::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("book_instance_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["book_instance_id"].isNull())
        {
            bookInstanceId_=std::make_shared<uint64_t>((uint64_t)pJson["book_instance_id"].asUInt64());
        }
    }
    if(pJson.isMember("message"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["message"].isNull())
        {
            message_=std::make_shared<std::string>(pJson["message"].asString());
        }
    }
}

const uint64_t &BookHistory::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &BookHistory::getId() const noexcept
{
    return id_;
}
void BookHistory::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename BookHistory::PrimaryKeyType & BookHistory::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &BookHistory::getValueOfBookInstanceId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(bookInstanceId_)
        return *bookInstanceId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &BookHistory::getBookInstanceId() const noexcept
{
    return bookInstanceId_;
}
void BookHistory::setBookInstanceId(const uint64_t &pBookInstanceId) noexcept
{
    bookInstanceId_ = std::make_shared<uint64_t>(pBookInstanceId);
    dirtyFlag_[1] = true;
}

const std::string &BookHistory::getValueOfMessage() const noexcept
{
    const static std::string defaultValue = std::string();
    if(message_)
        return *message_;
    return defaultValue;
}
const std::shared_ptr<std::string> &BookHistory::getMessage() const noexcept
{
    return message_;
}
void BookHistory::setMessage(const std::string &pMessage) noexcept
{
    message_ = std::make_shared<std::string>(pMessage);
    dirtyFlag_[2] = true;
}
void BookHistory::setMessage(std::string &&pMessage) noexcept
{
    message_ = std::make_shared<std::string>(std::move(pMessage));
    dirtyFlag_[2] = true;
}

void BookHistory::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &BookHistory::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "book_instance_id",
        "message"
    };
    return inCols;
}

void BookHistory::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getBookInstanceId())
        {
            binder << getValueOfBookInstanceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getMessage())
        {
            binder << getValueOfMessage();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> BookHistory::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void BookHistory::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getBookInstanceId())
        {
            binder << getValueOfBookInstanceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getMessage())
        {
            binder << getValueOfMessage();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value BookHistory::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getBookInstanceId())
    {
        ret["book_instance_id"]=(Json::UInt64)getValueOfBookInstanceId();
    }
    else
    {
        ret["book_instance_id"]=Json::Value();
    }
    if(getMessage())
    {
        ret["message"]=getValueOfMessage();
    }
    else
    {
        ret["message"]=Json::Value();
    }
    return ret;
}

Json::Value BookHistory::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getBookInstanceId())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfBookInstanceId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getMessage())
            {
                ret[pMasqueradingVector[2]]=getValueOfMessage();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getBookInstanceId())
    {
        ret["book_instance_id"]=(Json::UInt64)getValueOfBookInstanceId();
    }
    else
    {
        ret["book_instance_id"]=Json::Value();
    }
    if(getMessage())
    {
        ret["message"]=getValueOfMessage();
    }
    else
    {
        ret["message"]=Json::Value();
    }
    return ret;
}

bool BookHistory::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("book_instance_id"))
    {
        if(!validJsonOfField(1, "book_instance_id", pJson["book_instance_id"], err, true))
            return false;
    }
    else
    {
        err="The book_instance_id column cannot be null";
        return false;
    }
    if(pJson.isMember("message"))
    {
        if(!validJsonOfField(2, "message", pJson["message"], err, true))
            return false;
    }
    else
    {
        err="The message column cannot be null";
        return false;
    }
    return true;
}
bool BookHistory::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool BookHistory::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("book_instance_id"))
    {
        if(!validJsonOfField(1, "book_instance_id", pJson["book_instance_id"], err, false))
            return false;
    }
    if(pJson.isMember("message"))
    {
        if(!validJsonOfField(2, "message", pJson["message"], err, false))
            return false;
    }
    return true;
}
bool BookHistory::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool BookHistory::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson,
                                   std::string &err,
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}

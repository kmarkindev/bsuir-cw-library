/**
 *
 *  BookWithdraws.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "BookWithdraws.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::bsuir_library;

const std::string BookWithdraws::Cols::_id = "id";
const std::string BookWithdraws::Cols::_book_instance_id = "book_instance_id";
const std::string BookWithdraws::Cols::_reader_id = "reader_id";
const std::string BookWithdraws::Cols::_withdrawn_at = "withdrawn_at";
const std::string BookWithdraws::Cols::_return_at = "return_at";
const std::string BookWithdraws::primaryKeyName = "id";
const bool BookWithdraws::hasPrimaryKey = true;
const std::string BookWithdraws::tableName = "book_withdraws";

const std::vector<typename BookWithdraws::MetaData> BookWithdraws::metaData_={
{"id","uint64_t","bigint unsigned",8,1,1,1},
{"book_instance_id","uint64_t","bigint unsigned",8,0,0,1},
{"reader_id","uint64_t","bigint unsigned",8,0,0,1},
{"withdrawn_at","::trantor::Date","date",0,0,0,1},
{"return_at","::trantor::Date","date",0,0,0,1}
};
const std::string &BookWithdraws::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
BookWithdraws::BookWithdraws(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["book_instance_id"].isNull())
        {
            bookInstanceId_=std::make_shared<uint64_t>(r["book_instance_id"].as<uint64_t>());
        }
        if(!r["reader_id"].isNull())
        {
            readerId_=std::make_shared<uint64_t>(r["reader_id"].as<uint64_t>());
        }
        if(!r["withdrawn_at"].isNull())
        {
            auto daysStr = r["withdrawn_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            withdrawnAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["return_at"].isNull())
        {
            auto daysStr = r["return_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            returnAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            bookInstanceId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            readerId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            withdrawnAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            returnAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }

}

BookWithdraws::BookWithdraws(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            bookInstanceId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            readerId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            withdrawnAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            returnAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

BookWithdraws::BookWithdraws(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("book_instance_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["book_instance_id"].isNull())
        {
            bookInstanceId_=std::make_shared<uint64_t>((uint64_t)pJson["book_instance_id"].asUInt64());
        }
    }
    if(pJson.isMember("reader_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["reader_id"].isNull())
        {
            readerId_=std::make_shared<uint64_t>((uint64_t)pJson["reader_id"].asUInt64());
        }
    }
    if(pJson.isMember("withdrawn_at"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["withdrawn_at"].isNull())
        {
            auto daysStr = pJson["withdrawn_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            withdrawnAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("return_at"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["return_at"].isNull())
        {
            auto daysStr = pJson["return_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            returnAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void BookWithdraws::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            bookInstanceId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            readerId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            withdrawnAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            returnAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void BookWithdraws::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("book_instance_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["book_instance_id"].isNull())
        {
            bookInstanceId_=std::make_shared<uint64_t>((uint64_t)pJson["book_instance_id"].asUInt64());
        }
    }
    if(pJson.isMember("reader_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["reader_id"].isNull())
        {
            readerId_=std::make_shared<uint64_t>((uint64_t)pJson["reader_id"].asUInt64());
        }
    }
    if(pJson.isMember("withdrawn_at"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["withdrawn_at"].isNull())
        {
            auto daysStr = pJson["withdrawn_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            withdrawnAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("return_at"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["return_at"].isNull())
        {
            auto daysStr = pJson["return_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            returnAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

const uint64_t &BookWithdraws::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &BookWithdraws::getId() const noexcept
{
    return id_;
}
void BookWithdraws::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename BookWithdraws::PrimaryKeyType & BookWithdraws::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &BookWithdraws::getValueOfBookInstanceId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(bookInstanceId_)
        return *bookInstanceId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &BookWithdraws::getBookInstanceId() const noexcept
{
    return bookInstanceId_;
}
void BookWithdraws::setBookInstanceId(const uint64_t &pBookInstanceId) noexcept
{
    bookInstanceId_ = std::make_shared<uint64_t>(pBookInstanceId);
    dirtyFlag_[1] = true;
}

const uint64_t &BookWithdraws::getValueOfReaderId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(readerId_)
        return *readerId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &BookWithdraws::getReaderId() const noexcept
{
    return readerId_;
}
void BookWithdraws::setReaderId(const uint64_t &pReaderId) noexcept
{
    readerId_ = std::make_shared<uint64_t>(pReaderId);
    dirtyFlag_[2] = true;
}

const ::trantor::Date &BookWithdraws::getValueOfWithdrawnAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(withdrawnAt_)
        return *withdrawnAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &BookWithdraws::getWithdrawnAt() const noexcept
{
    return withdrawnAt_;
}
void BookWithdraws::setWithdrawnAt(const ::trantor::Date &pWithdrawnAt) noexcept
{
    withdrawnAt_ = std::make_shared<::trantor::Date>(pWithdrawnAt.roundDay());
    dirtyFlag_[3] = true;
}

const ::trantor::Date &BookWithdraws::getValueOfReturnAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(returnAt_)
        return *returnAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &BookWithdraws::getReturnAt() const noexcept
{
    return returnAt_;
}
void BookWithdraws::setReturnAt(const ::trantor::Date &pReturnAt) noexcept
{
    returnAt_ = std::make_shared<::trantor::Date>(pReturnAt.roundDay());
    dirtyFlag_[4] = true;
}

void BookWithdraws::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &BookWithdraws::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "book_instance_id",
        "reader_id",
        "withdrawn_at",
        "return_at"
    };
    return inCols;
}

void BookWithdraws::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getBookInstanceId())
        {
            binder << getValueOfBookInstanceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getReaderId())
        {
            binder << getValueOfReaderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getWithdrawnAt())
        {
            binder << getValueOfWithdrawnAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getReturnAt())
        {
            binder << getValueOfReturnAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> BookWithdraws::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void BookWithdraws::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getBookInstanceId())
        {
            binder << getValueOfBookInstanceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getReaderId())
        {
            binder << getValueOfReaderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getWithdrawnAt())
        {
            binder << getValueOfWithdrawnAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getReturnAt())
        {
            binder << getValueOfReturnAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value BookWithdraws::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getBookInstanceId())
    {
        ret["book_instance_id"]=(Json::UInt64)getValueOfBookInstanceId();
    }
    else
    {
        ret["book_instance_id"]=Json::Value();
    }
    if(getReaderId())
    {
        ret["reader_id"]=(Json::UInt64)getValueOfReaderId();
    }
    else
    {
        ret["reader_id"]=Json::Value();
    }
    if(getWithdrawnAt())
    {
        ret["withdrawn_at"]=getWithdrawnAt()->toDbStringLocal();
    }
    else
    {
        ret["withdrawn_at"]=Json::Value();
    }
    if(getReturnAt())
    {
        ret["return_at"]=getReturnAt()->toDbStringLocal();
    }
    else
    {
        ret["return_at"]=Json::Value();
    }
    return ret;
}

Json::Value BookWithdraws::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getBookInstanceId())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfBookInstanceId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getReaderId())
            {
                ret[pMasqueradingVector[2]]=(Json::UInt64)getValueOfReaderId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getWithdrawnAt())
            {
                ret[pMasqueradingVector[3]]=getWithdrawnAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getReturnAt())
            {
                ret[pMasqueradingVector[4]]=getReturnAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getBookInstanceId())
    {
        ret["book_instance_id"]=(Json::UInt64)getValueOfBookInstanceId();
    }
    else
    {
        ret["book_instance_id"]=Json::Value();
    }
    if(getReaderId())
    {
        ret["reader_id"]=(Json::UInt64)getValueOfReaderId();
    }
    else
    {
        ret["reader_id"]=Json::Value();
    }
    if(getWithdrawnAt())
    {
        ret["withdrawn_at"]=getWithdrawnAt()->toDbStringLocal();
    }
    else
    {
        ret["withdrawn_at"]=Json::Value();
    }
    if(getReturnAt())
    {
        ret["return_at"]=getReturnAt()->toDbStringLocal();
    }
    else
    {
        ret["return_at"]=Json::Value();
    }
    return ret;
}

bool BookWithdraws::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("book_instance_id"))
    {
        if(!validJsonOfField(1, "book_instance_id", pJson["book_instance_id"], err, true))
            return false;
    }
    else
    {
        err="The book_instance_id column cannot be null";
        return false;
    }
    if(pJson.isMember("reader_id"))
    {
        if(!validJsonOfField(2, "reader_id", pJson["reader_id"], err, true))
            return false;
    }
    else
    {
        err="The reader_id column cannot be null";
        return false;
    }
    if(pJson.isMember("withdrawn_at"))
    {
        if(!validJsonOfField(3, "withdrawn_at", pJson["withdrawn_at"], err, true))
            return false;
    }
    else
    {
        err="The withdrawn_at column cannot be null";
        return false;
    }
    if(pJson.isMember("return_at"))
    {
        if(!validJsonOfField(4, "return_at", pJson["return_at"], err, true))
            return false;
    }
    else
    {
        err="The return_at column cannot be null";
        return false;
    }
    return true;
}
bool BookWithdraws::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool BookWithdraws::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("book_instance_id"))
    {
        if(!validJsonOfField(1, "book_instance_id", pJson["book_instance_id"], err, false))
            return false;
    }
    if(pJson.isMember("reader_id"))
    {
        if(!validJsonOfField(2, "reader_id", pJson["reader_id"], err, false))
            return false;
    }
    if(pJson.isMember("withdrawn_at"))
    {
        if(!validJsonOfField(3, "withdrawn_at", pJson["withdrawn_at"], err, false))
            return false;
    }
    if(pJson.isMember("return_at"))
    {
        if(!validJsonOfField(4, "return_at", pJson["return_at"], err, false))
            return false;
    }
    return true;
}
bool BookWithdraws::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool BookWithdraws::validJsonOfField(size_t index,
                                     const std::string &fieldName,
                                     const Json::Value &pJson,
                                     std::string &err,
                                     bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
